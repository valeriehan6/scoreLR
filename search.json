[{"path":"https://valeriehan6.github.io/scoreLR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 V. Han Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://valeriehan6.github.io/scoreLR/articles/scoreLR.html","id":"abstract","dir":"Articles","previous_headings":"Introduction","what":"Abstract","title":"scoreLR","text":"Score-based likelihood ratios (SLRs) statistical method used quantify weight evidence used many forensic disciplines. Using context footwear evidence make problem concrete, similarity/dissimilarity scores computed pairs shoeprints. Note dependence scores share shoeprint shoe common. Given 5 similarity/dissimilarity scores, include four different methods computing SLR address dependence. also provide visualization resulting SLR using ROC curve. information can found corresponding Github repository.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/articles/scoreLR.html","id":"slrs","dir":"Articles","previous_headings":"Introduction","what":"SLRs","title":"scoreLR","text":"Score-based likelihood ratios (SLRs) used determine strength evidence particular source proposition. Typically, aim quantify similarity item found crime scene reference item known origin. score measures degree similarity analyzing one features items compared. assess probative value evidence, examiners estimate distributions score two competing propositions using experimental pairs items known origin. However, using items source build distributions can result score dependence. dependence can affect accuracy SLR classifier. address issue, Han (2022) explored methods improve performance SLR kernel density estimation (KDE) used estimate SLR. , performance measured based accuracy, true positive rate, true negative rate, rate weak misleading evidence average features method showing significantly better performance three four performance criteria compared default methods.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/articles/scoreLR.html","id":"using-slr-with-footwear-evidence","dir":"Articles","previous_headings":"Introduction","what":"Using SLR with Footwear Evidence","title":"scoreLR","text":"Take following hypothetical scenario. Shoeprints discovered crime scene investigators obtain images prints. Additionally, high-quality impressions suspect’s shoe outsole available forensic scientist. question interest whether suspect’s shoe produced prints crime scene. answer question, can rephrase problem test two propositions: \\(H_p\\): shoeprints crime scene made suspect’s shoe. \\(H_d\\): shoeprints crime scene made someone else’s shoe.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/articles/scoreLR.html","id":"methods","dir":"Articles","previous_headings":"Introduction","what":"Methods","title":"scoreLR","text":"Given scores \\(s_1 .. s_k\\) \\(s_i\\) computed pair shoeprints, SLR defined \\[ SLR = \\frac {f(s_1, . . . , s_k|H_p)} {f(s_1, . . . , s_k|H_d)}\\] \\(f(s_1, . . . , s_k|H_p)\\) \\(f(s_1, . . . , s_k|H_d)\\) estimated densities scores \\(s_1 .. s_k\\) two different hypotheses. Since scores obviously follow known distribution, kernel density estimation (KDE) used estimate KM KNM distributions. However, KDE assumes scores independent. Scores computed pairs images independent images shoe appear multiple pairs. details data refer data section. four proposed methods deal dependence issue. first method ignore fact observations assumed independent implement KDE using available scores. method labeled ignore_dep. Another remove dependence dataset used estimate KDE reduce sample largest independent subset pairs. call strict_indep_set. third approach, create multiple random independent subsets training dataset implement KDE subset. method called multiple_kde. last method, average scans correspond pair shoes. actual pairs shoes included dataset independent. called average_features.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/articles/scoreLR.html","id":"the-data","dir":"Articles","previous_headings":"","what":"The Data","title":"scoreLR","text":"package includes dataset called shoedata. use large set footwear outsole images collected Center Statistics Applications Forensic Evidence (CSAFE). One hundred forty-seven pairs worn shoes, scanned four times, included dataset. subset included package. Note row corresponds pair scans. data package data frame 926 rows 7 variables: source1: shoe identifier first shoe, left (L) right (R) dep1: pair identifier first shoe source2: shoe identifier second shoe, left (L) right (R) dep2: pair identifier second shoe clique_size: score; size maximal clique med_dist_euc: score; median Euclidean distance overlapping pixels input_overlap: score; proportion overlapping pixels aligned images example original data looks like, refer example section.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/articles/scoreLR.html","id":"inputting-new-data","dir":"Articles","previous_headings":"The Data","what":"Inputting New Data:","title":"scoreLR","text":"can choose import dataset, must specific format specific names. data include: source1: identifier first item dep1: pair identifier first item source2: identifier second item dep2: pair identifier second item can include five columns scores column represents different “function” (like euclidean, basic difference, deviation, etc). named something specific. sources match, row labeled known match sources match, labeled known-non match.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/articles/scoreLR.html","id":"functions","dir":"Articles","previous_headings":"","what":"Functions","title":"scoreLR","text":"package seven main functions three helper functions.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/articles/scoreLR.html","id":"dep_split","dir":"Articles","previous_headings":"Functions","what":"dep_split","title":"scoreLR","text":"function creates train/test split datasets dependencies. can specify train/test split proportion p. Note p 0 1.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/articles/scoreLR.html","id":"slr_results","dir":"Articles","previous_headings":"Functions","what":"slr_results","title":"scoreLR","text":"function essentially wrapper function computes results various methods given dataframe train/test split already done.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/articles/scoreLR.html","id":"plot_slr_roc","dir":"Articles","previous_headings":"Functions","what":"plot_slr_roc","title":"scoreLR","text":"function plots ROC curve given method. ROC curve created plotting true positive rate false positive rate various threshold settings.","code":""},{"path":[]},{"path":"https://valeriehan6.github.io/scoreLR/articles/scoreLR.html","id":"ignore_dep","dir":"Articles","previous_headings":"Functions > Methods Functions","what":"1. ignore_dep","title":"scoreLR","text":"function returns SLR evaluation ignore dependence method. method, like name suggests, ignores multivariate observations assumed independent, performs kernel density estimation (KDE) using available scores.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/articles/scoreLR.html","id":"strict_indep_set","dir":"Articles","previous_headings":"Functions > Methods Functions","what":"2. strict_indep_set","title":"scoreLR","text":"function returns SLR evaluation strict independence set. use method, perform KDE independent subset scores. (Note independence means source appears one pair.) resulting dataset much smaller original sample.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/articles/scoreLR.html","id":"avg_features","dir":"Articles","previous_headings":"Functions > Methods Functions","what":"3. avg_features","title":"scoreLR","text":"function returns SLR evaluation average features method. method averages rows correspond pairs sources. results independent set multivariate scores.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/articles/scoreLR.html","id":"multiple_kde","dir":"Articles","previous_headings":"Functions > Methods Functions","what":"4. multiple_kde","title":"scoreLR","text":"function returns SLR evaluation multiple KDE method. method creates multiple random independent subsets training dataset implements KDE subset.","code":""},{"path":[]},{"path":"https://valeriehan6.github.io/scoreLR/articles/scoreLR.html","id":"opt_thresh","dir":"Articles","previous_headings":"Functions > Helper Functions","what":"opt_thresh","title":"scoreLR","text":"function returns optimal threshold SLR. Optimality defined minimizing absolute difference true positive true negative rates.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/articles/scoreLR.html","id":"indep_km_set","dir":"Articles","previous_headings":"Functions > Helper Functions","what":"indep_km_set","title":"scoreLR","text":"function returns independent KM set training data using seed.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/articles/scoreLR.html","id":"indep_knm_set","dir":"Articles","previous_headings":"Functions > Helper Functions","what":"indep_knm_set","title":"scoreLR","text":"function returns independent KNM set data using seed.","code":""},{"path":[]},{"path":"https://valeriehan6.github.io/scoreLR/articles/scoreLR.html","id":"installation","dir":"Articles","previous_headings":"Using scoreLR","what":"Installation","title":"scoreLR","text":"can install development version scoreLR like :","code":"devtools::install_github(\"https://github.com/valeriehan6/scoreLR\")"},{"path":"https://valeriehan6.github.io/scoreLR/articles/scoreLR.html","id":"load-library","dir":"Articles","previous_headings":"Using scoreLR","what":"Load Library","title":"scoreLR","text":"couple ways use package. can: * Use methods get SLR values * Plot ROC curve methods * Compare methods","code":"library(scoreLR)"},{"path":"https://valeriehan6.github.io/scoreLR/articles/scoreLR.html","id":"example","dir":"Articles","previous_headings":"Using scoreLR","what":"Example","title":"scoreLR","text":"First read data. Note data must follow specifications outlined data section. dataset included package shoedata displayed . , can use dep_split function separate data training test data. can calculate SLRs based four methods specifying four methods ’d like run. default four methods. display . output gives list. element corresponds output corresponding method function. can also choose run method splitting data training/test sets KM/KNM. can extract SLR values KM_test KNM_test output. Note can calculate accuracy performance metrics specifying threshold (e.g., 1 optimal threshold calculated training data). can also plot ROC curves using plot_slr_roc. Due randomness train/test split choosing independent sets, run may produce different ROC curve, allow user plot multiple runs. alpha corresponds transparency parameter ggplot2 package. Increase alpha lines faint. method functions slr_results can also estimate SLR data ground truth unknown long training data provided.","code":"head(shoedata) #>   source1 dep1 source2 dep2 clique_size med_dist_euc input_overlap #> 1     1_L    1     1_L    1           6      1.81890         0.218 #> 2     1_L    1     1_L    1           6      1.41041         0.200 #> 3     1_L    1     1_L    1           6      1.80102         0.102 #> 4     1_L    1     1_L    1           8      1.08331         0.258 #> 5     1_L    1     1_L    1           5      1.93781         0.008 #> 6     1_L    1     1_L    1          12      0.91193         0.400 shoedata_split <- dep_split(shoedata, 0.75, seed = 20230506) head(shoedata_split) #>   source1 dep1 source2 dep2 clique_size med_dist_euc input_overlap train #> 1     1_L    1     1_L    1           6      1.81890         0.218  TRUE #> 2     1_L    1     1_L    1           6      1.41041         0.200  TRUE #> 3     1_L    1     1_L    1           6      1.80102         0.102  TRUE #> 4     1_L    1     1_L    1           8      1.08331         0.258  TRUE #> 5     1_L    1     1_L    1           5      1.93781         0.008  TRUE #> 6     1_L    1     1_L    1          12      0.91193         0.400  TRUE results <- slr_results(shoedata_split,                         method = c(\"IgnoreDependence\", \"StrictIndependentSet\",                                   \"AverageFeatures\", \"MultipleKDE\"))  str(results) #> List of 4 #>  $ IgnoreDependence    :List of 5 #>   ..$ KM_SLR    :'data.frame':   36 obs. of  1 variable: #>   .. ..$ SLR: num [1:36] 1.44e+88 1.21e+286 6.64e+121 8.35e+274 7.24e-03 ... #>   ..$ KNM_SLR   :'data.frame':   32 obs. of  1 variable: #>   .. ..$ SLR: num [1:32] 0.002694 0.001208 0.000935 0.004274 0.025819 ... #>   ..$ threshold : num 0.0208 #>   ..$ new_SLR   : logi NA #>   ..$ ROC_values:'data.frame':   63 obs. of  2 variables: #>   .. ..$ tpr: num [1:63] 0 0.0333 0.0667 0.1 0.1333 ... #>   .. ..$ fpr: num [1:63] 0 0 0 0 0 0 0 0 0 0 ... #>  $ StrictIndependentSet:List of 5 #>   ..$ KM_SLR    :'data.frame':   36 obs. of  1 variable: #>   .. ..$ SLR: num [1:36] 1.24e+17 5.19e+33 1.54e+09 5.87e+43 2.10e-02 ... #>   ..$ KNM_SLR   :'data.frame':   32 obs. of  1 variable: #>   .. ..$ SLR: num [1:32] 0.014155 0.01413 0.000261 0.031077 0.084366 ... #>   ..$ threshold : num 0.113 #>   ..$ new_SLR   : logi NA #>   ..$ ROC_values:'data.frame':   69 obs. of  2 variables: #>   .. ..$ tpr: num [1:69] 0 0.0278 0.0556 0.0833 0.1111 ... #>   .. ..$ fpr: num [1:69] 0 0 0 0 0 0 0 0 0 0 ... #>  $ AverageFeatures     :List of 5 #>   ..$ KM_SLR    :'data.frame':   6 obs. of  1 variable: #>   .. ..$ SLR: num [1:6] 3.06e+103 2.35e+17 2.25e+208 2.51e+19 Inf ... #>   ..$ KNM_SLR   :'data.frame':   2 obs. of  1 variable: #>   .. ..$ SLR: num [1:2] 0.014803 0.000448 #>   ..$ threshold : num 0.201 #>   ..$ new_SLR   : logi NA #>   ..$ ROC_values:'data.frame':   8 obs. of  2 variables: #>   .. ..$ tpr: num [1:8] 0 0.2 0.4 0.6 0.8 1 1 1 #>   .. ..$ fpr: num [1:8] 0 0 0 0 0 0 0.5 1 #>  $ MultipleKDE         :List of 5 #>   ..$ KM_SLR    :'data.frame':   36 obs. of  1 variable: #>   .. ..$ SLR: num [1:36] 1.36e+17 6.49e+32 3.06e+15 5.14e+40 1.60e-02 ... #>   ..$ KNM_SLR   :'data.frame':   32 obs. of  1 variable: #>   .. ..$ SLR: num [1:32] 0.00946 0.007 0.00449 0.01284 0.02834 ... #>   ..$ threshold : num 0.0214 #>   ..$ new_SLR   : logi NA #>   ..$ ROC_values:'data.frame':   69 obs. of  2 variables: #>   .. ..$ tpr: num [1:69] 0 0.0278 0.0556 0.0833 0.1111 ... #>   .. ..$ fpr: num [1:69] 0 0 0 0 0 0 0 0 0 0 ... # Split data KM_train <-  dplyr::filter(shoedata_split, source1 == source2 & train == TRUE) KM_test <- dplyr::filter(shoedata_split, source1 == source2 & train == FALSE) KNM_train <- dplyr::filter(shoedata_split, source1 != source2 & train == TRUE) KNM_test <- dplyr::filter(shoedata_split, source1 == source2 & train == FALSE)  # Ignoring dependence method ignoredep <- ignore_dep(KM_train, KM_test, KNM_train, KNM_test) # KM and KNM SLR values for the test data KM_SLR_test <- ignoredep$KM_SLR KNM_SLR_test <- ignoredep$KNM_SLR  # optimal threshold thresh <- ignoredep$threshold  # accuracy tp <- (KM_SLR_test > thresh) tn <- (KNM_SLR_test < thresh) accuracy <- (sum(tp) + sum(tn))/(length(tp) + length(tn))  # true positive rate tpr <- sum(tp)/length(tp)  # true negative rate tnr <- sum(tn)/length(tn)  # rate of weak/misleading evidence rwme <- (sum(KM_SLR_test < 100) + sum(KNM_SLR_test > 1/100))/   (nrow(KM_SLR_test) + nrow(KNM_SLR_test))  # you can choose to use a value other than 100 plot_slr_roc(shoedata, p = 0.75, method = \"IgnoreDependence\",               num_runs = 20, alpha = 0.1) # example unknown data unknown <- data.frame(clique_size = c(5, 8), med_dist_euc = c(1.9, 1.1),                        input_overlap = c(.01, 0.26))  res <- strict_indep_set(KM_train, KM_test, KNM_train, KNM_test, unknown)  res$new_SLR #>            SLR #> 1 7.472653e-02 #> 2 2.078067e+80"},{"path":"https://valeriehan6.github.io/scoreLR/articles/scoreLR.html","id":"future-work","dir":"Articles","previous_headings":"","what":"Future Work","title":"scoreLR","text":"couple things like implement future. Include final method Classification performance score-based likelihood ratios data exhibit various degrees dependence. Allow different definitions optimality. Add helper functions since method functions lot code common. Enable people upload data Shiny App. wrapper function allows users input data doesn’t column names specify .","code":""},{"path":"https://valeriehan6.github.io/scoreLR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Valerie Han. Author, maintainer. Marie Hardt. Author. Anyesha Ray. Author.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Han V, Hardt M, Ray (2023). scoreLR: Create Score-Based Likelihood Ratios Evaluate Based Various Methods. R package version 0.0.0.9000, https://valeriehan6.github.io/scoreLR/.","code":"@Manual{,   title = {scoreLR: Create Score-Based Likelihood Ratios and Evaluate Them Based on Various Methods},   author = {Valerie Han and Marie Hardt and Anyesha Ray},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://valeriehan6.github.io/scoreLR/}, }"},{"path":"https://valeriehan6.github.io/scoreLR/index.html","id":"scorelr-","dir":"","previous_headings":"","what":"Create Score-Based Likelihood Ratios and Evaluate\n    Them Based on Various Methods","title":"Create Score-Based Likelihood Ratios and Evaluate\n    Them Based on Various Methods","text":"package computes SLRs using various methods address dependence data compares various methods.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create Score-Based Likelihood Ratios and Evaluate\n    Them Based on Various Methods","text":"can install development version scoreLR like :","code":"devtools::install_github(\"https://github.com/valeriehan6/scoreLR\")"},{"path":"https://valeriehan6.github.io/scoreLR/index.html","id":"load-library","dir":"","previous_headings":"","what":"Load Library","title":"Create Score-Based Likelihood Ratios and Evaluate\n    Them Based on Various Methods","text":"","code":"library(scoreLR)"},{"path":"https://valeriehan6.github.io/scoreLR/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Create Score-Based Likelihood Ratios and Evaluate\n    Them Based on Various Methods","text":"use package? Read dataset following columns: source1: shoe identifier first shoe, left (L) right (R) dep1: pair identifier first shoe  dep2: pair identifier second shoe five columns similarity/dissimilarity scores. named something specific. following shoeprint dataset included package: Create train/test split accounts dependencies using dep_split function: Calculate SLRs based various methods: can one step slr_results function train/test split.","code":"data(shoedata) shoedata_split <- dep_split(shoedata, 0.8, 20230413)  head(shoedata_split) ##   source1 dep1 source2 dep2 clique_size med_dist_euc input_overlap train ## 1     1_L    1     1_L    1           6      1.81890         0.218  TRUE ## 2     1_L    1     1_L    1           6      1.41041         0.200  TRUE ## 3     1_L    1     1_L    1           6      1.80102         0.102  TRUE ## 4     1_L    1     1_L    1           8      1.08331         0.258  TRUE ## 5     1_L    1     1_L    1           5      1.93781         0.008  TRUE ## 6     1_L    1     1_L    1          12      0.91193         0.400  TRUE # Split data first KM_train <-  dplyr::filter(shoedata_split, source1 == source2 & train == TRUE) KM_test <- dplyr::filter(shoedata_split, source1 == source2 & train == FALSE) KNM_train <- dplyr::filter(shoedata_split, source1 != source2 & train == TRUE) KNM_test <- dplyr::filter(shoedata_split, source1 == source2 & train == FALSE)  # method functions ignore_dep(KM_train, KM_test, KNM_train, KNM_test) strict_indep_set(KM_train, KM_test, KNM_train, KNM_test) avg_features(KM_train, KM_test, KNM_train, KNM_test) multiple_kde(KM_train, KM_test, KNM_train, KNM_test) slr_results(shoedata_split)"},{"path":"https://valeriehan6.github.io/scoreLR/index.html","id":"source","dir":"","previous_headings":"","what":"Source","title":"Create Score-Based Likelihood Ratios and Evaluate\n    Them Based on Various Methods","text":"Han, Valerie. “Classification performance score-based likelihood ratios data exhibit various degrees dependence.” (2022).","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/avg_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Average features — avg_features","title":"Average features — avg_features","text":"function estimates SLR function using average features method, averaging score pairs sources computing kernel density estimation (KDE) averaged features. densities estimated KM_train KNM_train function produces various output based KM_test, KNM_test, unknown. KM_train, KM_test, KNM_train, KNM_train data frames containing columns named source1, source2, dep1, dep2. remaining columns must scores. may five scores.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/avg_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Average features — avg_features","text":"","code":"avg_features(KM_train, KM_test, KNM_train, KNM_test, unknown = NULL)"},{"path":"https://valeriehan6.github.io/scoreLR/reference/avg_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Average features — avg_features","text":"KM_train known matches (KM) training dataset. KM_test known matches (KM) testing dataset. KNM_train known non matches (KNM) training dataset. KNM_test known non matches (KNM) testing dataset. unknown data frame scores unknown case. Column names match variable names set scores.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/avg_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Average features — avg_features","text":"list containing following components: KM_SLR SLRs KM_test. KNM_SLR SLRs KNM_test. threshold optimal threshold calculated using KM_train KNM_train. new_SLR SLRs unknown. ROC_values data frame containing columns true positive rate tpr false positive rate fpr computed using KM_test KNM_test.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/avg_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Average features — avg_features","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union # Set up data shoedata_split <- dep_split(shoedata, 0.75) KM_train <- shoedata_split %>% filter(source1 == source2 & train == TRUE) KM_test <- shoedata_split %>% filter(source1 == source2 & train == FALSE) KNM_train <- shoedata_split %>% filter(source1 != source2 & train == TRUE) KNM_test <- shoedata_split %>% filter(source1 != source2 & train == FALSE) unknown <- data.frame(clique_size = c(5, 8), med_dist_euc = c(1.9, 1.1),                        input_overlap = c(.01, 0.26))  res <- avg_features(KM_train, KM_test, KNM_train, KNM_test, unknown)"},{"path":"https://valeriehan6.github.io/scoreLR/reference/dep_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Test/train split — dep_split","title":"Test/train split — dep_split","text":"function creates column assigning rows either training testing set. p*100% KNM pairs dependencies assigned training set.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/dep_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test/train split — dep_split","text":"","code":"dep_split(data, p, seed = NULL)"},{"path":"https://valeriehan6.github.io/scoreLR/reference/dep_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test/train split — dep_split","text":"data data frame containing columns named source1, source2, dep1, dep2. source1==source2, indicate known match (KM) pair, source1!=source2, indicate known non-match (KNM) pair. columns dep1 dep2 indicate dependence like training/testing split respect. p training/testing split percentage. 0 1. seed seed R's random number generator.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/dep_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test/train split — dep_split","text":"data frame columns input data data frame additional train column.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/dep_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test/train split — dep_split","text":"","code":"head(dep_split(shoedata, .75)) #>   source1 dep1 source2 dep2 clique_size med_dist_euc input_overlap train #> 1     1_L    1     1_L    1           6      1.81890         0.218  TRUE #> 2     1_L    1     1_L    1           6      1.41041         0.200  TRUE #> 3     1_L    1     1_L    1           6      1.80102         0.102  TRUE #> 4     1_L    1     1_L    1           8      1.08331         0.258  TRUE #> 5     1_L    1     1_L    1           5      1.93781         0.008  TRUE #> 6     1_L    1     1_L    1          12      0.91193         0.400  TRUE"},{"path":"https://valeriehan6.github.io/scoreLR/reference/ignore_dep.html","id":null,"dir":"Reference","previous_headings":"","what":"Ignore dependence — ignore_dep","title":"Ignore dependence — ignore_dep","text":"function estimates SLR function using ignoring dependence method KM_train KNM_train produces various output based KM_test, KNM_test, unknown. KM_train, KM_test, KNM_train, KNM_train data frames containing columns named source1, source2, dep1, dep2. remaining columns must scores. may five scores.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/ignore_dep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ignore dependence — ignore_dep","text":"","code":"ignore_dep(KM_train, KM_test, KNM_train, KNM_test, unknown = NULL)"},{"path":"https://valeriehan6.github.io/scoreLR/reference/ignore_dep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ignore dependence — ignore_dep","text":"KM_train known matches (KM) training dataset. KM_test known matches (KM) testing dataset. KNM_train known non matches (KNM) training dataset. KNM_test known non matches (KNM) testing dataset. unknown data frame scores unknown case. Column names match variable names set scores.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/ignore_dep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ignore dependence — ignore_dep","text":"list containing following components: KM_SLR SLRs KM_test. KNM_SLR SLRs KNM_test. threshold optimal threshold calculated using KM_train KNM_train. new_SLR SLRs unknown. ROC_values data frame containing columns true positive rate tpr false positive rate fpr computed using KM_test KNM_test.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/ignore_dep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ignore dependence — ignore_dep","text":"","code":"library(dplyr) # Set up data shoedata_split <- dep_split(shoedata, 0.75) KM_train <- shoedata_split %>% filter(source1 == source2 & train == TRUE) KM_test <- shoedata_split %>% filter(source1 == source2 & train == FALSE) KNM_train <- shoedata_split %>% filter(source1 != source2 & train == TRUE) KNM_test <- shoedata_split %>% filter(source1 != source2 & train == FALSE) unknown <- data.frame(clique_size = c(5, 8), med_dist_euc = c(1.9, 1.1),                        input_overlap = c(.01, 0.26))  res <- ignore_dep(KM_train, KM_test, KNM_train, KNM_test, unknown)"},{"path":"https://valeriehan6.github.io/scoreLR/reference/indep_km_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Independent known match set — indep_km_set","title":"Independent known match set — indep_km_set","text":"function returns independent set known matches (KM) using seed.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/indep_km_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Independent known match set — indep_km_set","text":"","code":"indep_km_set(KM_train, seed = NULL)"},{"path":"https://valeriehan6.github.io/scoreLR/reference/indep_km_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Independent known match set — indep_km_set","text":"KM_train known matches (KM) training dataset. seed seed R's random number generator.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/indep_km_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Independent known match set — indep_km_set","text":"dataframe columns KM_train containing independent KM set training data.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/indep_knm_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Independent known non match set — indep_knm_set","title":"Independent known non match set — indep_knm_set","text":"function returns independent set known non matches (KNM) using seed.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/indep_knm_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Independent known non match set — indep_knm_set","text":"","code":"indep_knm_set(KNM_train, seed = NULL)"},{"path":"https://valeriehan6.github.io/scoreLR/reference/indep_knm_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Independent known non match set — indep_knm_set","text":"KNM_train known non matches (KNM) training dataset. seed seed R's random number generator.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/indep_knm_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Independent known non match set — indep_knm_set","text":"dataframe columns KNM_train containing independent KM set training data.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/multiple_kde.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple independent sets — multiple_kde","title":"Multiple independent sets — multiple_kde","text":"function estimates SLR function using multiple independent sets method. kernel density estimate (KDE) numerator denominator density computed multiple independent sets estimated densities averaged compute SLR. independent sets used estimate SLR function KM_train KNM_train. function produces various output based KM_test, KNM_test, unknown. KM_train, KM_test, KNM_train, KNM_train data frames containing columns named source1, source2, dep1, dep2. remaining columns must scores. may five scores.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/multiple_kde.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple independent sets — multiple_kde","text":"","code":"multiple_kde(   KM_train,   KM_test,   KNM_train,   KNM_test,   NUM_SETS = 10,   unknown = NULL )"},{"path":"https://valeriehan6.github.io/scoreLR/reference/multiple_kde.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple independent sets — multiple_kde","text":"KM_train known matches (KM) training dataset. KM_test known matches (KM) testing dataset. KNM_train known non matches (KNM) training dataset. KNM_test known non matches (KNM) testing dataset. NUM_SETS number independent sets use. unknown data frame scores unknown case. Column names match variable names set scores.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/multiple_kde.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiple independent sets — multiple_kde","text":"list containing following components: KM_SLR SLRs KM_test. KNM_SLR SLRs KNM_test. threshold optimal threshold calculated using KM_train KNM_train. new_SLR SLRs unknown. ROC_values data frame containing columns true positive rate tpr false positive rate fpr computed using KM_test KNM_test.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/multiple_kde.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiple independent sets — multiple_kde","text":"","code":"library(dplyr) # Set up data shoedata_split <- dep_split(shoedata, 0.75) KM_train <- shoedata_split %>% filter(source1 == source2 & train == TRUE) KM_test <- shoedata_split %>% filter(source1 == source2 & train == FALSE) KNM_train <- shoedata_split %>% filter(source1 != source2 & train == TRUE) KNM_test <- shoedata_split %>% filter(source1 != source2 & train == FALSE) unknown <- data.frame(clique_size = c(5, 8), med_dist_euc = c(1.9, 1.1),                        input_overlap = c(.01, 0.26))  res <- multiple_kde(KM_train, KM_test, KNM_train, KNM_test, 5, unknown)"},{"path":"https://valeriehan6.github.io/scoreLR/reference/opt_thresh.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimal threshold — opt_thresh","title":"Optimal threshold — opt_thresh","text":"function estimates optimal threshold provided SLRs. Optimality defined minimizing distance true positive true negative rates.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/opt_thresh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimal threshold — opt_thresh","text":"","code":"opt_thresh(KM_SLR_train, KNM_SLR_train)"},{"path":"https://valeriehan6.github.io/scoreLR/reference/opt_thresh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimal threshold — opt_thresh","text":"KM_SLR_train vector SLRs known matches training dataset. KNM_SLR_train vector SLRs known non-matches training dataset.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/opt_thresh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimal threshold — opt_thresh","text":"optimal threshold SLR.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/plot_slr_roc.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ROC curve for selected method — plot_slr_roc","title":"Plot ROC curve for selected method — plot_slr_roc","text":"function returns plot ROC curves produced num_runs times running slr_results(). Note function supports plotting one method time.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/plot_slr_roc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ROC curve for selected method — plot_slr_roc","text":"","code":"plot_slr_roc(   data,   p,   method = \"AverageFeatures\",   num_runs = 200,   alpha = 0.1,   NUM_SETS = 10,   seed = NULL )"},{"path":"https://valeriehan6.github.io/scoreLR/reference/plot_slr_roc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ROC curve for selected method — plot_slr_roc","text":"data data frame containing columns named source1, source2, dep1,  dep2. remaining columns must scores. may five scores. p training/testing split percentage. 0 1. method string. Options \"IgnoreDependence\", \"StrictIndependentSet\", \"AverageFeatures\", \"MultipleKDE\". num_runs number times run slr_results. alpha transparency parameter ggplot2 package. NUM_SETS number sets use multiple KDE method. seed seed R‘s random number generator.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/plot_slr_roc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot ROC curve for selected method — plot_slr_roc","text":"plot selected method.","code":""},{"path":[]},{"path":"https://valeriehan6.github.io/scoreLR/reference/plot_slr_roc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot ROC curve for selected method — plot_slr_roc","text":"","code":"plot_slr_roc(shoedata, p = 0.75, method = \"StrictIndependentSet\",               num_runs = 3, alpha = 0.5)"},{"path":"https://valeriehan6.github.io/scoreLR/reference/runExample.html","id":null,"dir":"Reference","previous_headings":"","what":"This function runs the shiny app for scoreLR — runExample","title":"This function runs the shiny app for scoreLR — runExample","text":"function runs shiny app scoreLR","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/runExample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function runs the shiny app for scoreLR — runExample","text":"","code":"runExample()"},{"path":"https://valeriehan6.github.io/scoreLR/reference/shoedata.html","id":null,"dir":"Reference","previous_headings":"","what":"An example data set with scores derived from shoeprints. — shoedata","title":"An example data set with scores derived from shoeprints. — shoedata","text":"example data set scores derived shoeprints.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/shoedata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An example data set with scores derived from shoeprints. — shoedata","text":"","code":"shoedata"},{"path":"https://valeriehan6.github.io/scoreLR/reference/shoedata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An example data set with scores derived from shoeprints. — shoedata","text":"data frame 926 rows 7 variables: source1 shoe identifier first shoe. dep1 pair identifier first shoe. source2 shoe identifier second shoe. dep2 pair identifier second shoe. clique_size score; size maximal clique. med_dist_euc score; median Euclidean distance overlapping pixels. input_overlap score; proportion overlapping pixels aligned images.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/shoedata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"An example data set with scores derived from shoeprints. — shoedata","text":"Han (2022). Original shoe outsole scans Center Statistics Applications Forensic Evidence (CSAFE).","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/slr_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Results of one or more method of computing the SLR — slr_results","title":"Results of one or more method of computing the SLR — slr_results","text":"function returns results one method computing SLR using method functions package.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/slr_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Results of one or more method of computing the SLR — slr_results","text":"","code":"slr_results(   data,   unknown = NULL,   method = c(\"IgnoreDependence\", \"StrictIndependentSet\", \"AverageFeatures\",     \"MultipleKDE\"),   NUM_SETS = 10,   seed = NULL )"},{"path":"https://valeriehan6.github.io/scoreLR/reference/slr_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Results of one or more method of computing the SLR — slr_results","text":"data data frame containing columns named source1, source2, dep1,  dep2, train. train column logical vector TRUE denoting training set FALSE test set. remaining columns must scores. may five scores. unknown data frame scores unknown case. Column names match variable names set scores. method vector methods calculate SLR. Options include \"IgnoreDependence\", \"StrictIndependentSet\", \"AverageFeatures\", \"MultipleKDE\". NUM_SETS number sets use multiple KDE method. seed seed R's random number generator.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/slr_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Results of one or more method of computing the SLR — slr_results","text":"list output methods method. element list list containing following components: KM_SLR SLRs KM_test. KNM_SLR SLRs KNM_test. threshold optimal threshold calculated using KM_train KNM_train. new_SLR SLRs unknown. ROC_values data frame containing columns true positive rate tpr false positive rate fpr computed using KM_test KNM_test.","code":""},{"path":[]},{"path":"https://valeriehan6.github.io/scoreLR/reference/slr_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Results of one or more method of computing the SLR — slr_results","text":"","code":"# Set up shoedata_split <- dep_split(shoedata, 0.75) unknown <- data.frame(clique_size = c(5, 8), med_dist_euc = c(1.9, 1.1),                        input_overlap = c(.01, 0.26))  res_all <- slr_results(shoedata_split, unknown) # all methods res_def <- slr_results(shoedata_split, unknown,             c(\"IgnoreDependence\", \"StrictIndependentSet\")) # default methods res_prop <- slr_results(shoedata_split, unknown,              c(\"AverageFeatures\", \"MultipleKDE\")) # proposed methods"},{"path":"https://valeriehan6.github.io/scoreLR/reference/strict_indep_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Strict independent set — strict_indep_set","title":"Strict independent set — strict_indep_set","text":"function estimates SLR function using strict independent set method, computing numerator denominator density using independent set KM_train KNM_train, respectively. function produces various output based KM_test, KNM_test, unknown. KM_train, KM_test, KNM_train, KNM_train data frames containing columns named source1, source2, dep1, dep2. remaining columns must scores. may five scores.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/strict_indep_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strict independent set — strict_indep_set","text":"","code":"strict_indep_set(   KM_train,   KM_test,   KNM_train,   KNM_test,   unknown = NULL,   seed = NULL )"},{"path":"https://valeriehan6.github.io/scoreLR/reference/strict_indep_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strict independent set — strict_indep_set","text":"KM_train known matches (KM) training dataset. KM_test known matches (KM) testing dataset. KNM_train known non matches (KNM) training dataset. KNM_test known non matches (KNM) testing dataset. unknown data frame scores unknown case. Column names match variable names set scores. seed seed R's random number generator.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/strict_indep_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Strict independent set — strict_indep_set","text":"list containing following components: KM_SLR SLRs KM_test. KNM_SLR SLRs KNM_test. threshold optimal threshold calculated using KM_train KNM_train. new_SLR SLRs unknown. ROC_values data frame containing columns true positive rate tpr false positive rate fpr computed using KM_test KNM_test.","code":""},{"path":"https://valeriehan6.github.io/scoreLR/reference/strict_indep_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Strict independent set — strict_indep_set","text":"","code":"library(dplyr) # Set up data shoedata_split <- dep_split(shoedata, 0.75) KM_train <- shoedata_split %>% filter(source1 == source2 & train == TRUE) KM_test <- shoedata_split %>% filter(source1 == source2 & train == FALSE) KNM_train <- shoedata_split %>% filter(source1 != source2 & train == TRUE) KNM_test <- shoedata_split %>% filter(source1 != source2 & train == FALSE) unknown <- data.frame(clique_size = c(5, 8), med_dist_euc = c(1.9, 1.1),                        input_overlap = c(.01, 0.26))  res <- strict_indep_set(KM_train, KM_test, KNM_train, KNM_test, unknown)"}]
